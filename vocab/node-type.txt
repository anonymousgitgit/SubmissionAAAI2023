!=
return_statement
call_expression
else
inline
break_statement
unary_expression
primitive_type
abstract_pointer_declarator
field_identifier
null
sized_type_specifier
-
false
type_descriptor
?
const
preproc_def
case
^=
for
extern
enum_specifier
.
typedef
switch_statement
struct_specifier
number_literal
true
=
||
while
type_identifier
!
parenthesized_declarator
storage_class_specifier
default
unsigned
goto
abstract_parenthesized_declarator
argument_list
field_expression
field_declaration
%=
identifier
parenthesized_expression
char_literal
concatenated_string
/=
function_definition
parameter_declaration
init_declarator
*=
signed
>
break
labeled_statement
&
error
enumerator_list
--
sizeof
return
binary_expression
*
register
preproc_ifdef
do_statement
#ifdef
update_expression
case_statement
pointer_expression
conditional_expression
cast_expression
'
&&
comment
comma_expression
escape_sequence
short
%
>>
declaration
continue
long
statement_identifier
==
-=
function_declarator
++
assignment_expression
field_declaration_list
abstract_function_declarator
compound_statement
parameter_list
if_statement
array_declarator
|=
for_statement
pointer_declarator
macro_type_specifier
static
/
abstract_array_declarator
<
~
#endif
goto_statement
^
translation_unit
preproc_arg
while_statement
string_literal
type_definition
->
initializer_list
<<=
<=
subscript_expression
continue_statement
+
enumerator
struct
"
+=
do
|
type_qualifier
switch
if
sizeof_expression
>=
<<
expression_statement
>>=