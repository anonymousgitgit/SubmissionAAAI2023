switch
destructor_name
else
namespace
private
virtual
<
--
decltype
variadic_declarator
abstract_reference_declarator
compound_literal_expression
linkage_specification
compound_statement
class
preproc_elif
/
/=
type_parameter_declaration
pointer_expression
template_template_parameter_declaration
for
catch
field_expression
signed
dependent_type
goto
parenthesized_expression
preproc_include
subscript_expression
::
variadic_type_parameter_declaration
preproc_params
case
parameter_list
lambda_capture_specifier
alias_declaration
pointer_declarator
const
virtual_specifier
function_definition
masked_statement
noexcept
return
optional_type_parameter_declaration
constexpr
+=
!=
abstract_function_declarator
labeled_statement
final
field_identifier
attribute_specifier
preproc_arg
preproc_else
if
try_statement
type_definition
catch_clause
short
operator
typedef
operator_name
static
nullptr
template_function
number_literal
while
call_expression
template_type
for_statement
unsigned
parameter_pack_expansion
ms_pointer_modifier
identifier
preproc_call
]]
argument_list
-
-=
statement_identifier
binary_expression
volatile
missing_assignment_expression
field_initializer_list
#define
#elif
public
return_statement
->
if_statement
sizeof_expression
enumerator_list
template_parameter_list
new_expression
operator_cast
?
lambda_expression
structured_binding_declarator
struct
typename
namespace_identifier
=
storage_class_specifier
new
variadic_parameter_declaration
switch_statement
enum_specifier
namespace_definition
scoped_identifier
lambda_default_capture
delete_method_clause
attribute
[[
template
register
>
inline
<<
protected
field_declaration_list
reference_declarator
access_specifier
cast_expression
scoped_field_identifier
throw_statement
scoped_namespace_identifier
do_statement
using_declaration
goto_statement
primitive_type
parameter_declaration
break_statement
update_expression
for_range_loop
friend_declaration
init_declarator
override
template_argument_list
type_descriptor
field_declaration
ms_restrict_modifier
defined
missing_binary_expression
preproc_ifdef
comma_expression
this
abstract_parenthesized_declarator
true
.
case_statement
expression_statement
assignment_expression
template_method
function_declarator
scoped_type_identifier
default_method_clause
new_declarator
continue_statement
throw
optional_parameter_declaration
concatenated_string
try
#ifdef
static_assert
preproc_defined
sized_type_specifier
enum
enumerator
base_class_clause
field_initializer
preproc_directive
preproc_if
missing_update_expression
explicit
default
#endif
#if
declaration_list
long
virtual_function_specifier
while_statement
false
unary_expression
trailing_return_type
class_specifier
break
translation_unit
null
throw_specifier
...
#else
%
struct_specifier
*
*=
delete_expression
&&
raw_string_literal
type_qualifier
template_declaration
#include
initializer_list
explicit_function_specifier
preproc_function_def
~
parenthesized_declarator
abstract_array_declarator
declaration
union_specifier
mutable
friend
string_literal
union
&
"
static_assert_declaration
delete
type_identifier
conditional_expression
#ifndef
++
char_literal
auto
preproc_def
abstract_pointer_declarator
'
escape_sequence
array_declarator
__attribute__
using
error
sizeof
extern
system_lib_string
bitfield_clause
unk_type